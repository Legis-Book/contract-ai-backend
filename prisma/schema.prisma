// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ContractType {
  NDA
  EMPLOYMENT
  VENDOR
  SAAS
  SALES
  OTHER
}

enum ContractStatus {
  PENDING_REVIEW
  IN_REVIEW
  REVIEWED
  APPROVED
  REJECTED
}

enum ClauseType {
  TERMINATION
  CONFIDENTIALITY
  INDEMNIFICATION
  LIABILITY
  INTELLECTUAL_PROPERTY
  GOVERNING_LAW
  DISPUTE_RESOLUTION
  FORCE_MAJEURE
  ASSIGNMENT
  NOTICES
  SEVERABILITY
  ENTIRE_AGREEMENT
  AMENDMENT
  WAIVER
  COUNTERPARTS
  HEADINGS
  DEFINITIONS
  OTHER
}

enum RiskType {
  MISSING_CLAUSE
  DEVIATION
  COMPLIANCE_ISSUE
  AMBIGUOUS_LANGUAGE
  UNFAIR_TERMS
  DATA_PROTECTION
  INTELLECTUAL_PROPERTY
  LIABILITY
  TERMINATION
  OTHER
}

enum RiskSeverity {
  LOW
  MEDIUM
  HIGH
}

enum SummaryType {
  FULL
  CLAUSE
  RISK
  COMPLIANCE
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
}

model User {
  id         Int          @id @default(autoincrement())
  email      String?      @unique
  password   String?
  provider   String       @default("email")
  socialId   String?
  firstName  String?
  lastName   String?
  photoId    String?
  photo      File?        @relation(fields: [photoId], references: [id])
  roleId     Int?
  role       Role?        @relation(fields: [roleId], references: [id])
  statusId   Int?
  status     Status?      @relation(fields: [statusId], references: [id])
  reviews    HumanReview[] @relation("ReviewerReviews")
  sessions   Session[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  deletedAt  DateTime?
}

model File {
  id   String  @id @default(uuid())
  path String
  users User[]
}

model Role {
  id    Int    @id
  name  String?
  users User[]
}

model Status {
  id    Int    @id
  name  String?
  users User[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  hash      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
}

model Contract {
  id                  String        @id @default(uuid())
  title               String
  type                ContractType  @default(OTHER)
  status              ContractStatus @default(PENDING_REVIEW)
  originalText        String?
  governingLaw        String?
  parties             Json?
  uploadDate          DateTime?
  reviewCompletionDate DateTime?
  language            String?
  clauses             Clause[]
  riskFlags           RiskFlag[]
  summaries           Summary[]
  qnaInteractions     QnA[]
  reviews             HumanReview[]
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

model Clause {
  id              String      @id @default(uuid())
  number          String
  text            String
  type            ClauseType?
  isReviewed      Boolean     @default(false)
  isApproved      Boolean     @default(false)
  suggestedText   String?
  contractId      String
  contract        Contract    @relation(fields: [contractId], references: [id])
  riskFlags       RiskFlag[]
  summaries       Summary[]
  qnaInteractions QnA[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model RiskFlag {
  id                  String      @id @default(uuid())
  type                RiskType
  severity            RiskSeverity
  description         String
  suggestedResolution String?
  isReviewed          Boolean     @default(false)
  isResolved          Boolean     @default(false)
  reviewerComments    String?
  contractId          String
  contract            Contract    @relation(fields: [contractId], references: [id])
  clauseId            String?
  clause              Clause?     @relation(fields: [clauseId], references: [id])
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
}

model Summary {
  id               String      @id @default(uuid())
  type             SummaryType
  text             String
  isReviewed       Boolean     @default(false)
  reviewerComments String?
  contractId       String
  contract         Contract    @relation(fields: [contractId], references: [id])
  clauseId         String?
  clause           Clause?     @relation(fields: [clauseId], references: [id])
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model QnA {
  id              String      @id @default(uuid())
  question        String
  answer          String
  isAccepted      Boolean     @default(false)
  isFlagged       Boolean     @default(false)
  feedback        String?
  contractId      String
  contract        Contract    @relation(fields: [contractId], references: [id])
  clauseId        String?
  clause          Clause?     @relation(fields: [clauseId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model HumanReview {
  id             String      @id @default(uuid())
  status         ReviewStatus @default(PENDING)
  comments       String?
  startDate      DateTime?
  completionDate DateTime?
  reviewerId     Int?
  reviewer       User?       @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  contractId     String
  contract       Contract    @relation(fields: [contractId], references: [id])
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Rule {
  id                   String   @id @default(uuid())
  name                 String
  description          String?
  pattern              String?
  similarityThreshold  Float?
  deviationAllowedPct  Float?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model StandardClause {
  id                Int      @id @default(autoincrement())
  name              String
  type              String
  contractType      String
  text              String
  jurisdiction      String?
  version           String?
  allowedDeviations Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  previousVersionId Int?
  previousVersion   StandardClause? @relation("PreviousVersion", fields: [previousVersionId], references: [id])
  nextVersions      StandardClause[] @relation("PreviousVersion")
}
